{"version":3,"sources":["signup.js","auth.js","signin.js","App.js","reportWebVitals.js","index.js"],"names":["validate","values","props","errors","console","log","email","test","password","length","firstName","lastName","Signup","setappState","useState","sucsess","setSucsess","class","Button","onClick","variant","color","initialValues","onSubmit","setErrors","result","localStorage","getItem","setItem","JSON","stringify","error","signupapi","touched","handleChange","TextField","name","id","label","helperText","onChange","type","Signin","user","setUser","removeItem","data","parse","signinapi","App","appState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1207001.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport \"./signup.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { signupapi } from \"./auth\";\r\n\r\nconst validate = (values, props /* only available when using withFormik */) => {\r\n  const errors = {};\r\n  console.log(values);\r\n  if (!values.email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Required\";\r\n  } else if (values.password.length < 5) {\r\n    errors.password = \"Password should be atleast of 5 characters\";\r\n  }\r\n  if (!values.firstName) {\r\n    errors.firstName = \"Required\";\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = \"Required\";\r\n  }\r\n\r\n  //...\r\n  console.log(errors);\r\n  return errors;\r\n};\r\n\r\nexport default function Signup({setappState}) {\r\n  const [sucsess, setSucsess] = useState(false);\r\n  const handleSubmit = (values,{setErrors}) => {\r\n    const result = signupapi(values);\r\n    if (result.sucsess) {\r\n      setSucsess(true);\r\n    }\r\n    else {\r\n        setErrors({email:result.error})\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {sucsess && (\r\n        <div class=\"mainpage\">\r\n          <h2>Registration sucsessfull</h2>\r\n          <Button\r\n            onClick={() => setappState(\"Signin\")}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Sign In\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {!sucsess && (\r\n        <div>\r\n          <div class=\"signrp\">\r\n            <h1>Sign Up</h1>\r\n          </div>\r\n          <div>\r\n            <Formik\r\n              validate={validate}\r\n              initialValues={{\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n              }}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ errors, touched, handleChange }) => (\r\n                <Form class=\"formrp\">\r\n                  <TextField\r\n                    error={errors.firstName && touched.firstName}\r\n                    name=\"firstName\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"First Name\"\r\n                    helperText={errors.firstName}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <TextField\r\n                    error={errors.lastName && touched.lastName}\r\n                    name=\"lastName\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"Last Name\"\r\n                    helperText={errors.lastName}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <TextField\r\n                    error={errors.email && touched.email}\r\n                    name=\"email\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"E-mail\"\r\n                    helperText={errors.email}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <TextField\r\n                    error={errors.password && touched.password}\r\n                    name=\"password\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"Password\"\r\n                    helperText={errors.password}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Sign Up\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","export function signupapi(values) {\r\n  if (localStorage.getItem(values.email) === null) {\r\n    localStorage.setItem(values.email, JSON.stringify(values));\r\n    return { sucsess: true };\r\n  } else return { error: \"email already registered\" };\r\n}\r\nexport function signinapi(values) {\r\n  const data = JSON.parse(localStorage.getItem(values.email));\r\n  if (data?.password === values.password) return { sucsess: true, data };\r\n  else return { error: \"Invalid Username or password\" };\r\n}\r\nexport function deleteuserapi(email) {\r\n  localStorage.removeItem(email)\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport \"./signup.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { deleteuserapi, signinapi } from \"./auth\";\r\n\r\nconst validate = (values, props /* only available when using withFormik */) => {\r\n  const errors = {};\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Required\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default function Signin({ setappState }) {\r\n  const [sucsess, setSucsess] = useState(false);\r\n  const [user, setUser] = useState(false);\r\n  const handleSubmit = (values, { setErrors }) => {\r\n    const result = signinapi(values);\r\n    if (result.sucsess) {\r\n      setSucsess(true);\r\n      setUser(result.data);\r\n    } else {\r\n      setErrors({ password: result.error });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {sucsess && (\r\n        <div class=\"mainpage\">\r\n          <h2>Welcome</h2>\r\n          <div>Four Name = {user.firstName}</div>\r\n          <div>Last Name = {user.lastName}</div>\r\n          <div>E-mail = {user.email}</div>\r\n          <Button\r\n            onClick={() => setappState(null)}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Sign Out\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              deleteuserapi(user.email);\r\n              setappState(null);\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {!sucsess && (\r\n        <div>\r\n          <div class=\"signrp\">\r\n            <h1>Sign In</h1>\r\n          </div>\r\n          <div>\r\n            <Formik\r\n              validate={validate}\r\n              initialValues={{\r\n                email: \"\",\r\n                password: \"\",\r\n              }}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ errors, touched, handleChange }) => (\r\n                <Form class=\"formrp\">\r\n                  <TextField\r\n                    error={errors.email && touched.email}\r\n                    name=\"email\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"E-mail\"\r\n                    helperText={errors.email}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <TextField\r\n                    error={errors.password && touched.password}\r\n                    name=\"password\"\r\n                    id=\"outlined-error-helper-text\"\r\n                    label=\"Password\"\r\n                    helperText={errors.password}\r\n                    variant=\"outlined\"\r\n                    onChange={handleChange}\r\n                  />\r\n\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Sign In\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Signup from \"./signup\";\nimport Signin from \"./signin\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction App() {\n  const [appState, setappState] = useState(null);\n  return (\n    <div>\n      {!appState && (\n        <div class=\"mainpage\">\n          <h1>\n            Welcome to my web page\n          </h1>\n          <Button\n            onClick={() => setappState(\"Signup\")}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Sign Up\n          </Button>\n          <Button\n            onClick={() => setappState(\"Signin\")}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Sign In\n          </Button>\n        </div>\n      )}\n      {appState === \"Signup\" && <Signup setappState={setappState}></Signup>}\n      {appState === \"Signin\" && <Signin setappState={setappState}></Signin>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}